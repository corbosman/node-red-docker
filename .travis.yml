sudo: required

dist: xenial

services: docker

language: bash

env:
  global:
    - QEMU_VERSION=v4.0.0
    - OS=alpine
    - DOCKER_FILE=Dockerfile.alpine

  matrix:
    ### Node JS 10 #####################################################################################################
    # Default Images
    - NODE_VERSION=10 TAG_SUFFIX=default QEMU_ARCH=x86_64  ARCH=amd64
    - NODE_VERSION=10 TAG_SUFFIX=default QEMU_ARCH=arm     ARCH=arm32v6
    - NODE_VERSION=10 TAG_SUFFIX=default QEMU_ARCH=arm     ARCH=arm32v7
    - NODE_VERSION=10 TAG_SUFFIX=default QEMU_ARCH=aarch64 ARCH=arm64v8
    - NODE_VERSION=10 TAG_SUFFIX=default QEMU_ARCH=s390x   ARCH=s390x

    # Minimal Images
    - NODE_VERSION=10 TAG_SUFFIX=minimal QEMU_ARCH=x86_64  ARCH=amd64
    - NODE_VERSION=10 TAG_SUFFIX=minimal QEMU_ARCH=arm     ARCH=arm32v6
    - NODE_VERSION=10 TAG_SUFFIX=minimal QEMU_ARCH=arm     ARCH=arm32v7
    - NODE_VERSION=10 TAG_SUFFIX=minimal QEMU_ARCH=aarch64 ARCH=arm64v8
    - NODE_VERSION=10 TAG_SUFFIX=minimal QEMU_ARCH=s390x   ARCH=s390x

    ### Node JS 12 #####################################################################################################
    # Default Images
    - NODE_VERSION=12 TAG_SUFFIX=default QEMU_ARCH=x86_64  ARCH=amd64
    - NODE_VERSION=12 TAG_SUFFIX=default QEMU_ARCH=arm     ARCH=arm32v6
    - NODE_VERSION=12 TAG_SUFFIX=default QEMU_ARCH=arm     ARCH=arm32v7
    - NODE_VERSION=12 TAG_SUFFIX=default QEMU_ARCH=aarch64 ARCH=arm64v8
    - NODE_VERSION=12 TAG_SUFFIX=default QEMU_ARCH=s390x   ARCH=s390x

    # Minimal Images
    - NODE_VERSION=12 TAG_SUFFIX=minimal QEMU_ARCH=x86_64  ARCH=amd64
    - NODE_VERSION=12 TAG_SUFFIX=minimal QEMU_ARCH=arm     ARCH=arm32v6
    - NODE_VERSION=12 TAG_SUFFIX=minimal QEMU_ARCH=arm     ARCH=arm32v7
    - NODE_VERSION=12 TAG_SUFFIX=minimal QEMU_ARCH=aarch64 ARCH=arm64v8
    - NODE_VERSION=12 TAG_SUFFIX=minimal QEMU_ARCH=s390x   ARCH=s390x

before_install:
  - ./.docker/docker.sh prepare

install: true

before_script:
  # Set TARGET
  - >
    if [[ "${TRAVIS_BRANCH}" == "master" ]]; then
      export TARGET=nodered/node-red
    else
      export TARGET=nodered/node-red-dev
    fi

  # Set BUILD_VERSION
  - >
    if [ ! -z "${TRAVIS_TAG}" ]; then
      export BUILD_VERSION=${TRAVIS_TAG:1};
    fi

  # Set NODE_RED_VERSION from package.json
  - >
    export NODE_RED_VERSION=$(grep -oE "\"node-red\": \"(\w*.\w*.\w*.\w*.\w*.)" package.json | cut -d\" -f4)

script:
  # Build Docker image
  - ./.docker/docker.sh build

  # Test Docker image
  - ./.docker/docker.sh test

  # Push Docker image, ony if TRAVIS_TAG is set
  - >
    if [ ! -z "${TRAVIS_TAG}" ]; then
      # Tag Docker image
      ./.docker/docker.sh tag

      # Docker Login
      echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

      # Push Docker image
      ./.docker/docker.sh push

      # Docker Logout
      docker logout
    fi

jobs:
    include:
        - stage: manifest
          # Only create and push manifest list to Docker Hub, when tag starts with a `v`, eg. v0.20.8
          if: tag =~ ^v
          script:
              # Create and push Docker manifest lists
              # The push order is displayed in reverse order on Docker Hub

              # Docker Login
              - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

              # Create and push manifest list `version` for minimal
              - ./.docker/docker.sh manifest-list-version "12" "minimal"
              - ./.docker/docker.sh manifest-list-version "10" "minimal"
              - ./.docker/docker.sh manifest-list-version "" "minimal"

              # Create and push manifest list `version` for default
              - ./.docker/docker.sh manifest-list-version "12" "default"
              - ./.docker/docker.sh manifest-list-version "10" "default"
              - ./.docker/docker.sh manifest-list-version "" "default"

              # Tags with either `dev`, `test`, `edge` or `beta` get manifest listed and pushed to `nodered/node-red-dev`
              - >
                if [[ "${TRAVIS_BRANCH}" == "dev" ]]; then
                  # Create and push manifest list `dev`, `test`, `edge` or `beta` for minimal
                  ./.docker/docker.sh manifest_list_dev_test_edge_beta_latest "12" "minimal"
                  ./.docker/docker.sh manifest_list_dev_test_edge_beta_latest "10" "minimal"
                  ./.docker/docker.sh manifest_list_dev_test_edge_beta_latest "" "minimal"

                  # Create and push manifest list `dev`, `test`, `edge` or `beta` for default
                  - ./.docker/docker.sh manifest_list_dev_test_edge_beta_latest "12" "default"
                  - ./.docker/docker.sh manifest_list_dev_test_edge_beta_latest "10" "default"
                  - ./.docker/docker.sh manifest_list_dev_test_edge_beta_latest "" "default"
                fi

              # Tags with either `beta` or none of these (in case of a final) get manifest listed and pushed to `nodered/node-red`
              - >
                if [[ "${TRAVIS_BRANCH}" == "master" ]]; then
                 # Create and push manifest list `beta` or `latest` for minimal
                 ./.docker/docker.sh manifest_list_beta_latest "12" "minimal"
                 ./.docker/docker.sh manifest_list_beta_latest "10" "minimal"
                 ./.docker/docker.sh manifest_list_beta_latest "" "minimal"

                 # Create and push manifest list `beta` or `latest` for default
                 - ./.docker/docker.sh manifest_list_beta_latest "12" "default"
                 - ./.docker/docker.sh manifest_list_beta_latest "10" "default"
                 - ./.docker/docker.sh manifest_list_beta_latest "" "default"
                fi

              # Docker Logout
              - docker logout

# notify me when things fail
notifications:
  email: true
